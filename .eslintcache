[{"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\index.js":"1","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\reportWebVitals.js":"2","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\App.js":"3","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\layout\\Layout.js":"4","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\navBar\\NavBar.js":"5","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\navBar\\SignUpButton.js":"6","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\navBar\\NavBarLogo.js":"7","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\navBar\\SignInButton.js":"8","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\shared\\StyledLink.js":"9","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\data\\firebase.js":"10","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\Vegetables.js":"11","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\Home.js":"12","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\FlowerBeds.js":"13","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\FlowerBedForm.js":"14","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\CreateFlowerBed.js":"15","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\DimensionForm.js":"16","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\InsolationForm.js":"17","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\VegetableSelector.js":"18","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\ExistingFlowerBeds.js":"19"},{"size":494,"mtime":1612908363746,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1612903922348,"results":"22","hashOfConfig":"21"},{"size":967,"mtime":1613740371338,"results":"23","hashOfConfig":"21"},{"size":93,"mtime":1612903922348,"results":"24","hashOfConfig":"21"},{"size":1146,"mtime":1613740371341,"results":"25","hashOfConfig":"21"},{"size":3487,"mtime":1613740371343,"results":"26","hashOfConfig":"21"},{"size":89,"mtime":1613740371342,"results":"27","hashOfConfig":"21"},{"size":3401,"mtime":1613740371342,"results":"28","hashOfConfig":"21"},{"size":330,"mtime":1613740371347,"results":"29","hashOfConfig":"21"},{"size":596,"mtime":1613740371346,"results":"30","hashOfConfig":"21"},{"size":486,"mtime":1613740371345,"results":"31","hashOfConfig":"21"},{"size":918,"mtime":1613740371345,"results":"32","hashOfConfig":"21"},{"size":860,"mtime":1613740371344,"results":"33","hashOfConfig":"21"},{"size":1357,"mtime":1613740371339,"results":"34","hashOfConfig":"21"},{"size":476,"mtime":1613740371343,"results":"35","hashOfConfig":"21"},{"size":1085,"mtime":1613740371339,"results":"36","hashOfConfig":"21"},{"size":980,"mtime":1613740371339,"results":"37","hashOfConfig":"21"},{"size":5317,"mtime":1613740371727,"results":"38","hashOfConfig":"21"},{"size":746,"mtime":1613740371705,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"sq2clo",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\index.js",[],["83","84"],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\reportWebVitals.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\App.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\layout\\Layout.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\navBar\\NavBar.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\navBar\\SignUpButton.js",["85","86"],"import React, { useCallback } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"../../shared/StyledLink\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport StyledCloseButton from '../../shared/StyledModalCloseButton'\r\nimport CloseIcon from '@material-ui/icons/CloseSharp'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    top: 110,\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function SignUpButton({ history }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSignUp = useCallback(async event => {\r\n    event.preventDefault()\r\n\r\n  })\r\n  const body = (\r\n    <Modal\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"sign-up-modal\"\r\n      aria-describedby=\"sign-up-modal\"\r\n    >\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Rejestracja\r\n          </Typography>\r\n          <StyledCloseButton onClick={handleClose}>\r\n            <CloseIcon />\r\n          </StyledCloseButton>\r\n          <FormControl fullWidth required>\r\n            <TextField\r\n              autoFocus\r\n              required\r\n              variant=\"outlined\"\r\n              id=\"username\"\r\n              label=\"Nazwa użytkownika\"\r\n              name=\"username\"\r\n              autoComplete=\"username\"\r\n              margin=\"normal\"\r\n            />\r\n            <TextField\r\n              required\r\n              variant=\"outlined\"\r\n              id=\"email\"\r\n              label=\"Adres email\"\r\n              name=\"email\"\r\n              margin=\"normal\"\r\n              autoComplete=\"email\"\r\n            />\r\n            <TextField\r\n              required\r\n              variant=\"outlined\"\r\n              name=\"password\"\r\n              label=\"Hasło\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              margin=\"normal\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Załóż konto\r\n            </Button>\r\n            <Grid container justify=\"flex-end\">\r\n              <Grid item>\r\n                <Link to=\"/\" variant=\"body2\">\r\n                  Masz już konto? Zaloguj się!\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </FormControl>\r\n        </div>\r\n      </Container>\r\n    </Modal>\r\n  );\r\n  return (\r\n    <>\r\n      <Button onClick={handleOpen} variant=\"outlined\">\r\n        Zarejestruj\r\n      </Button>\r\n      {body}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\navBar\\NavBarLogo.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\navBar\\SignInButton.js",["87"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"../../shared/StyledLink\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport StyledCloseButton from '../../shared/StyledModalCloseButton'\r\nimport CloseIcon from '@material-ui/icons/CloseSharp'\r\nimport app from '../../data/firebase'\r\nimport FormControl from '@material-ui/core/FormControl'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    top: 110,\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nfunction SignInButton() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const body = (\r\n    <Modal\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"sign-in-modal\"\r\n      aria-describedby=\"sign-in-modal\"\r\n    >\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Logowanie\r\n          </Typography>\r\n          <StyledCloseButton onClick={handleClose}>\r\n            <CloseIcon />\r\n          </StyledCloseButton>\r\n          <FormControl fullWidth required>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              id=\"email\"\r\n              label=\"Adres email\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              name=\"password\"\r\n              label=\"Hasło\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Zapamiętaj\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Zaloguj się\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link to=\"/\" variant=\"body2\">\r\n                  Zapomniałeś hasła?\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link to=\"/\" variant=\"body2\">\r\n                  {\"Nie masz konta? Założysz je tutaj!\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </FormControl>\r\n        </div>\r\n      </Container>\r\n    </Modal>\r\n  );\r\n  return (\r\n    <>\r\n      <Button onClick={handleOpen} variant=\"outlined\">\r\n        Zaloguj się\r\n      </Button>\r\n      {body}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignInButton;\r\n","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\shared\\StyledLink.js",["88"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  &:focus,\r\n  &:hover,\r\n  &:visited,\r\n  &:link,\r\n  &:active {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport default (props) => <StyledLink {...props} />;\r\n","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\data\\firebase.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\Vegetables.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\Home.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\FlowerBeds.js",["89"],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\FlowerBedForm.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\CreateFlowerBed.js",["90"],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\DimensionForm.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\InsolationForm.js",[],"C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\VegetableSelector.js",["91"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport SelectedVegetables from \"./SelectedVegetables\";\r\n<<<<<<< Updated upstream:src/components/VegetableSelector.js\r\nimport { db } from \"../data/firebase\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n=======\r\nimport RecommendedVegetables from './RecommendedVegetables'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { firestore } from \"../../data/firebase\";\r\nimport styled from 'styled-components'\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    overflow: hidden;\r\n`\r\nconst useStyles = makeStyles(() => ({\r\n>>>>>>> Stashed changes:src/pages/SelectVegetables/VegetableSelector.js\r\n  gridList: {\r\n    width: 1000,\r\n    height: 600,\r\n  },\r\n  icon: {\r\n    color: \"rgba(255, 255, 255, 0.54)\",\r\n  },\r\n  header: {\r\n    fontSize: \"40px\",\r\n  },\r\n}));\r\n\r\nexport default function VegetableSelector() {\r\n  const classes = useStyles();\r\n  const [items, setItems] = useState([]);\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const [recommendedItems, setRecommendedItems] = useState([]);\r\n\r\n  useEffect(\r\n    function loadData() {\r\n      const fetchData = async () => {\r\n        const vegetables = await firestore.collection(\"Vegetables\").get();\r\n        const tmp = [];\r\n        vegetables.docs.map(async (doc) => {\r\n          tmp.push({ id: doc.id, ...doc.data() });\r\n        });\r\n        tmp.sort((a, b) => a.name > b.name ? 1 : -1)\r\n        setItems(tmp);\r\n      };\r\n      fetchData();\r\n    }, []);\r\n\r\n\r\n<<<<<<< Updated upstream:src/components/VegetableSelector.js\r\n  useEffect(function loadData() {\r\n    const fetchData = async () => {\r\n      const vegetables = await db.collection(\"Vegetables\").get();\r\n      const tmp = [];\r\n      vegetables.docs.map(async (doc) => {\r\n        tmp.push({ id: doc.id, ...doc.data() });\r\n      });\r\n      setData(tmp);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  function handleClick(item) {\r\n    toggleSelectedData((selectedData) => [...selectedData, item]);\r\n  }\r\n\r\n  function deleteSelectedItem(id) {\r\n    console.log(id);\r\n    toggleSelectedData((selectedData) =>\r\n=======\r\n  useEffect(\r\n    function updateRecommendation() {\r\n      var matchedItems = [];\r\n      selectedItems.map(item => item.likesArray.map(it => {\r\n        for (let i = 0; i < items.length; i++) {\r\n          if (it === items[i].id) {\r\n            matchedItems.push(items[i]);\r\n          }\r\n        }\r\n      }))\r\n      setRecommendedItems([...matchedItems])\r\n    }, [selectedItems]);\r\n\r\n  function findItem(item) {\r\n    return selectedItems.some(el => el.id === item.id)\r\n  }\r\n\r\n  function handleClick(item) {\r\n    console.log(item);\r\n    const founded = findItem(item);\r\n    if (!founded) {\r\n      setSelectedItems((selectedItems) => [...selectedItems, item]);\r\n    }\r\n  }\r\n\r\n  function deleteSelectedItem(id) {\r\n    setSelectedItems((selectedData) =>\r\n>>>>>>> Stashed changes:src/pages/SelectVegetables/VegetableSelector.js\r\n      selectedData.filter((item) => item.id !== id)\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n<<<<<<< Updated upstream:src/components/VegetableSelector.js\r\n      <h1 style={{ textAlign: \"center\" }}>\r\n        Krok 3. Jakie warzywa chcesz zasadzić?\r\n      </h1>\r\n      <div className={classes.root}>\r\n=======\r\n      <Typography variant=\"h4\" align=\"center\">\r\n        Wybierz warzywa do zasadzenia\r\n        </Typography>\r\n      <StyledContainer>\r\n>>>>>>> Stashed changes:src/pages/SelectVegetables/VegetableSelector.js\r\n        <GridList className={classes.gridList} cellHeight={400}>\r\n          {items.map((item) => (\r\n            <GridListTile key={item.image} cols={0.4} rows={0.5}>\r\n              <img src={item.image} alt={item.id} />\r\n              <GridListTileBar\r\n                title={item.name}\r\n                actionIcon={\r\n                  <IconButton\r\n                    className={classes.icon}\r\n                    onClick={() => handleClick(item)}\r\n                  >\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                }\r\n              />\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n<<<<<<< Updated upstream:src/components/VegetableSelector.js\r\n\r\n        {selectedData && (\r\n=======\r\n        {selectedItems && (\r\n>>>>>>> Stashed changes:src/pages/SelectVegetables/VegetableSelector.js\r\n          <SelectedVegetables\r\n            selectedItems={selectedItems}\r\n            deleteSelectedItem={deleteSelectedItem}\r\n          />\r\n        )}\r\n        <RecommendedVegetables recommendedItems={recommendedItems} addItem={handleClick} />\r\n      </StyledContainer>\r\n    </>\r\n  );\r\n}\r\n// <GridListTile key=\"Subheader\" cols={1} style={{ height: \"auto\" }}>\r\n//   <ListSubheader component=\"div\" className={classes.header}>\r\n//     Warzywa\r\n//   </ListSubheader>\r\n// </GridListTile>;\r\n","C:\\Users\\48604\\Documents\\GitHub\\vegarden-v2\\src\\components\\pages\\ExistingFlowerBeds.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":42,"column":9,"nodeType":"98","messageId":"99","endLine":42,"endColumn":21},{"ruleId":"100","severity":1,"message":"101","line":42,"column":24,"nodeType":"98","endLine":42,"endColumn":35},{"ruleId":"96","severity":1,"message":"102","line":15,"column":8,"nodeType":"98","messageId":"99","endLine":15,"endColumn":11},{"ruleId":"103","severity":1,"message":"104","line":16,"column":1,"nodeType":"105","endLine":16,"endColumn":53},{"ruleId":"96","severity":1,"message":"106","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":17},{"ruleId":"96","severity":1,"message":"107","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":21},{"ruleId":null,"fatal":true,"severity":2,"message":"108","line":9,"column":2},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'handleSignUp' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'app' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Container' is defined but never used.","'ArrowBackIcon' is defined but never used.","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m  7 | \u001b[39m\u001b[36mimport\u001b[39m \u001b[33mAddIcon\u001b[39m from \u001b[32m\"@material-ui/icons/Add\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  8 | \u001b[39m\u001b[36mimport\u001b[39m \u001b[33mSelectedVegetables\u001b[39m from \u001b[32m\"./SelectedVegetables\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  9 | \u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<\u001b[39m \u001b[33mUpdated\u001b[39m upstream\u001b[33m:\u001b[39msrc\u001b[33m/\u001b[39mcomponents\u001b[33m/\u001b[39m\u001b[33mVegetableSelector\u001b[39m\u001b[33m.\u001b[39mjs\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 10 | \u001b[39m\u001b[36mimport\u001b[39m { db } from \u001b[32m\"../data/firebase\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 11 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 12 | \u001b[39m\u001b[36mconst\u001b[39m useStyles \u001b[33m=\u001b[39m makeStyles((theme) \u001b[33m=>\u001b[39m ({\u001b[0m","no-global-assign","no-unsafe-negation"]